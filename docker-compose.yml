services:
  # PostgreSQL Database
  db:
    image: postgres:15-alpine
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    environment:
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    restart: unless-stopped
    networks:
      - trojan-defender-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s

  # Redis Cache
  redis:
    image: redis:7-alpine
    volumes:
      - redis_data:/data
    restart: unless-stopped
    networks:
      - trojan-defender-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # ClamAV Scanner
  scanner:
    image: clamav/clamav:latest
    volumes:
      - clamav_data:/var/lib/clamav
    restart: unless-stopped
    networks:
      - trojan-defender-network
    ports:
      - "3310:3310"
    environment:
      CLAMAV_NO_FRESHCLAM: false
      CLAMAV_NO_CLAMD: false
    healthcheck:
      test: ["CMD", "sh", "-c", "echo 'PING' | nc localhost 3310 | grep -q 'PONG' || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 180s

  # Object storage service (MinIO)
  object_storage:
    image: minio/minio:latest
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - minio_data:/data
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
    command: server /data --console-address ":9001"
    restart: unless-stopped
    networks:
      - trojan-defender-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Backend API service
  api:
    build:
      context: ./backend
      dockerfile: Dockerfile
    ports:
      - "8000:8000"
    volumes:
      - ./backend:/app
      - ./backend/media:/app/media
      - ./backend/logs:/app/logs
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      DEBUG: ${DEBUG}
      SECRET_KEY: ${SECRET_KEY}
      DJANGO_ALLOWED_HOSTS: ${DJANGO_ALLOWED_HOSTS}
      DB_ENGINE: django.db.backends.postgresql
      DB_NAME: ${DB_NAME}
      DB_USER: ${DB_USER}
      DB_PASSWORD: ${DB_PASSWORD}
      DB_HOST: db
      DB_PORT: 5432
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_URL: ${REDIS_URL}
      EMAIL_HOST: ${EMAIL_HOST}
      EMAIL_PORT: ${EMAIL_PORT}
      EMAIL_HOST_USER: ${EMAIL_HOST_USER}
      EMAIL_HOST_PASSWORD: ${EMAIL_HOST_PASSWORD}
      EMAIL_USE_TLS: ${EMAIL_USE_TLS}
      DEFAULT_FROM_EMAIL: ${DEFAULT_FROM_EMAIL}
      SCANNER_HOST: scanner
      SCANNER_PORT: ${SCANNER_PORT}
      CORS_ALLOWED_ORIGINS: ${CORS_ALLOWED_ORIGINS}
      JWT_SECRET_KEY: ${JWT_SECRET_KEY}
      JWT_ALGORITHM: ${JWT_ALGORITHM}
      JWT_ACCESS_TOKEN_LIFETIME: ${JWT_ACCESS_TOKEN_LIFETIME}
      JWT_REFRESH_TOKEN_LIFETIME: ${JWT_REFRESH_TOKEN_LIFETIME}
      MINIO_ENDPOINT: ${MINIO_ENDPOINT}
      MINIO_ACCESS_KEY: ${MINIO_ACCESS_KEY}
      MINIO_SECRET_KEY: ${MINIO_SECRET_KEY}
      MINIO_BUCKET_NAME: ${MINIO_BUCKET_NAME}
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      MAX_UPLOAD_SIZE: ${MAX_UPLOAD_SIZE}
      MAX_ARCHIVE_DEPTH: ${MAX_ARCHIVE_DEPTH}
    restart: unless-stopped
    networks:
      - trojan-defender-network
    healthcheck:
      test: ["CMD", "python", "manage.py", "check", "--deploy"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Celery worker service
  worker:
    build:
      context: ./backend
      dockerfile: Dockerfile.worker
    env_file:
      - .env
    volumes:
      - ./backend:/app
      - ./backend/media:/app/media
      - ./backend/logs:/app/logs
    depends_on:
      api:
        condition: service_healthy
    environment:
      DEBUG: ${DEBUG}
      SECRET_KEY: ${SECRET_KEY}
      SQL_ENGINE: django.db.backends.postgresql
      SQL_DATABASE: ${DB_NAME}
      SQL_USER: ${DB_USER}
      SQL_PASSWORD: ${DB_PASSWORD}
      SQL_HOST: db
      SQL_PORT: 5432
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_URL: ${REDIS_URL}
      EMAIL_HOST: ${EMAIL_HOST}
      EMAIL_PORT: ${EMAIL_PORT}
      EMAIL_HOST_USER: ${EMAIL_HOST_USER}
      EMAIL_HOST_PASSWORD: ${EMAIL_HOST_PASSWORD}
      EMAIL_USE_TLS: ${EMAIL_USE_TLS}
      DEFAULT_FROM_EMAIL: ${DEFAULT_FROM_EMAIL}
      SCANNER_HOST: scanner
      SCANNER_PORT: ${SCANNER_PORT}
      MINIO_ENDPOINT: ${MINIO_ENDPOINT}
      MINIO_ACCESS_KEY: ${MINIO_ACCESS_KEY}
      MINIO_SECRET_KEY: ${MINIO_SECRET_KEY}
      MINIO_BUCKET_NAME: ${MINIO_BUCKET_NAME}
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      MAX_UPLOAD_SIZE: ${MAX_UPLOAD_SIZE}
      MAX_ARCHIVE_DEPTH: ${MAX_ARCHIVE_DEPTH}
    command: celery -A trojan_defender worker -l info --pool=solo
    restart: unless-stopped
    networks:
      - trojan-defender-network

  # Celery beat service for scheduled tasks
  beat:
    build:
      context: ./backend
      dockerfile: Dockerfile.worker
    volumes:
      - ./backend:/app
      - ./backend/logs:/app/logs
    depends_on:
      worker:
        condition: service_started
    environment:
      DEBUG: ${DEBUG}
      SECRET_KEY: ${SECRET_KEY}
      DB_ENGINE: django.db.backends.postgresql
      DB_NAME: ${DB_NAME}
      DB_USER: ${DB_USER}
      DB_PASSWORD: ${DB_PASSWORD}
      DB_HOST: db
      DB_PORT: 5432
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_URL: ${REDIS_URL}
    command: celery -A trojan_defender beat -l info
    restart: unless-stopped
    networks:
      - trojan-defender-network

  # Frontend service
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - "3000:80"
    depends_on:
      api:
        condition: service_healthy
    environment:
      NODE_ENV: ${NODE_ENV}
      VITE_API_URL: ${VITE_API_URL}
      VITE_WS_URL: ${VITE_WS_URL}
    restart: unless-stopped
    networks:
      - trojan-defender-network

networks:
  trojan-defender-network:
    driver: bridge

volumes:
  postgres_data:
  redis_data:
  clamav_data:
  minio_data: